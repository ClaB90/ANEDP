/****************** Politecnico di Milano - ANEDP project ******************/
/* 														 					*
 *  	authors Edoardo Arbib 							 					*
 *				Claudia Bonomi 							 					*
 *											   			 					*
 *  	Descrizione: definizioni delle funzioni per CG		  				*
 *						Problema di stato									*
 *						Problema di controllo								*
 *																			*
 * 		Dipendenze:	funzioni.edp -> waT e a1						        *		
 *				    soluzioniEsatte -> definizioni funzioni esatte			*
 * 					main -> nsol						 					*
 * 					state -> statesol[]					 					*
 * 														 					*
 ****************************************************************************/

/* La funzione stateCG risolve il problema di stato ad ogni passo temporale dato un termine noto
 * e crea il vettore delle soluzioni di questo ad ogni passo temporale
 * l'operatore implementato in questa funzione è l'operatore Sh
 */
func real[int,int] stateCG(real[int,int]& xx)
{	
	/* Valori dei moltiplicatori di lagrange sullo spazio Yh
	 */
	Ph listate,loldstate;

	/* il termine noto del problema di stato diventa
	 */
	varf tnnew(w,wtest) =   int2d(Th)( wold*wtest/dt)
					  	  - int2d(Th)( gamma2*( dx(wold)*dx(wtest) + dy(wold)*dy(wtest) ) );
							//contributo di u
				 		  + int2d(Th)( gamma3*( listate*wtest ))
					 	  + int2d(Th)( gamma4*( loldstate*wtest ));
	
	real[int] tmp(Yh.ndof);
	real[int,int] stateSolCG(nsol,Yh.ndof);
	
	//inizializzo le variabili iniziali ogni volta che chiamo la funzione
	wold=w0;
	real savet =t;
	t=dt;
	
	//Primo passo di EI con passo temporale dt/2
    gamma1=1./2.;
    gamma2=0.;
    gamma3=0.;
    gamma4=1./2.;
	
	//definisco i valori di uold
    loldstate[] = xx(0,:);
    listate[] = xx(1,:);
	
	/* Calcolo S e bc
	 * devo fare (nsol-1) passi prima di ricalcolare la matrice S per l'ultimo passo di EA
	 * mentre il vettore statebc rimane invariato ad ogni passo
	 */
	S=s(Yh,Yh,solver=GMRES);
	statebc=s(0,Yh);

    tmp=tnnew(0,Yh);
    tmp=tmp+statebc;
	
	//Risolvo
    w[]=(S^-1)*tmp;
	
	// salvo la mia soluzione al passo precedente
	stateSolCG(0,:)=w[];
	
	//aggiorno wold, uold e il tempo
	wold=w;
	loldstate = listate;
	t += dt;
	
    // Passi di CN
    for(int i=1; i<nsol-1; i++)
	{
		gamma1=1./2.;
	    gamma2=1./2.;
	    gamma3=0.;
	    gamma4=1.;
		
		listate[] = xx(i+1,:);
		
		tmp = tnnew(0,Yh);
		tmp += statebc;
		
		//Risolvo
		w[] = S^-1*tmp;
		//plot(w,wait=1,fill=1,cmm=i);
		
		// salvo la mia soluzione al passo precedente
		stateSolCG(i,:)=w[];
		
		//aggiorno wold, uold, il tempo e g0old
		wold=w;
		loldstate = listate;
		t += dt;

	}
	
    //Passo di EA
	gamma1=0.;
    gamma2=1./2.;
    gamma3=1./2.;
    gamma4=0.;
	
	S=s(Yh,Yh);
	
	tmp = tnnew(0,Yh);
	tmp += statebc;
	
	w[] = S^-1*tmp;
	//plot(w,wait=1,fill=1,cmm="ciao fin");
	
	stateSolCG(nsol-1,:)=w[];
	
	t=savet;
	
	return stateSolCG;
}

/* La funzione adjCG risolve il problema aggiunto ad ogni passo temporale dato un termine noto
 * e salva la soluzione in un opportuno vettore
 * l'operatore implementato in questa funzione è l'operatore Sh^*
 */
func real[int,int] adjCG(real[int,int]& xx)
{	
	/* il termine noto del problema di adj rimarrà uguale ad h ed hnext verranno assegnati i valori
	 * dei moltiplicatori di lagrange
	 */
	
	/* vettori per le condizioni al bordo e per il termine noto
	 */
	real[int] tmpadj(Ph.ndof);
	real[int] adjbc(Ph.ndof);
	
	real[int,int] AdjSolCG(nsol,Ph.ndof);
	
	matrix Adj=adj(Ph,Ph,solver=GMRES);
	
	int j = nsol-1;
	pnext=pT;
	
	adjbc=adj(0,Ph);

	while( j > 0 )
		{
			h[]=xx(j,:);
	        hnext[]=xx(j+1,:);
		
			tmpadj = adjtn(0,Ph);
			tmpadj += adjbc;
		
			AdjSolCG(j-1,:)= Adj^-1*tmpadj;
			pnext=p;
			j--;
		}
	
	return AdjSolCG;
}

/* La funzione rightCG risolve il termine a destra dell'equazione
 *  ( I + (1/alpha)*ShI_(sh*)Sh*)dl = - (l+yd) + ShP[a,b](-(1/alpha)Sh*l)
 * necessaria per il primo passo dell'algortitmo Damped Newton
 */
func real[int,int] rightCG(real[int,int]& xx)
{
	real[int,int] righthandCG(nsol,Yh.ndof);
	real[int,int] tmp(nsol,Yh.ndof);
	
	//calcolo Sh^*l
	tmp = adjCG(xx);
	//molitiplico per (-1./alpha)
	tmp = tmp*(-1./alpha);
	//proietto su [a,b]
	tmp = PUabMatrixPh(tmp,dofPh);
	//calcolo Shl
	righthandCG = stateCG(tmp);
	
	real savet=t;
	t=dt;
	
	for(int i=0; i<nsol; i++)
	{
		righthandCG(i,:) = -( xx(i,:) + wd ) + tmp(i,:);
		t = t+dt;
	}
	
	t=savet;
	
	return righthandCG;
}