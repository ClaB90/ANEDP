/*********************** Politecnico di Milano - ANEDP project ************************/
/* 														 					          *
 *  	authors Edoardo Arbib 							 					          *
 *				Claudia Bonomi 							 					          *
 *											   			 					          *
 *  	Descrizione: Per il problema di stato definiamo  					          *
 *						- spazi funzionali		         					          *
 *						- problema spaziale				 					          *
 *					    - funzione per la soluzione del problema temporale            * 
 *    					- norme dell'errore e analisi di convergenza                  *
 * 														 				 	 	 	  *
 * 		Dipendenze: main -> nsol + paramtri temporali + u(=soluzione controllo)  	  * 
 *						 -> alpha parametro del problema di controllo 				  *
 * 					soluzioniEsatte -> soluzione esatta di y e parametri t1 e t2 	  * 
 * 									   necessarie per il calcolo dell'errore     	  *
 * 					funzioni -> wa ed a1								 			  *
 * 														 				 	 	 	  *
 **************************************************************************************/

	
/****************** 00.PARAMETRI E FUNZIONI ******************/
// w0 soluzione all'istante iniziale
t=0.;
func w0 = sin(pi*x)*sin(pi*y);

// wb funzione al bordo di dirchlet 
func wb = 0.;

/* Parametri per il calcolo dell'errore dello stato
 * errStateL2 = || pi*y -y_k ||L2
 *
 * errProjectStateL2 = || y -pi*y_k ||L2
 */
real errStateL2=0.;
real errProjectStateL2 = 0.;
real errStateLinf = 0.;

/****************** 01.SPAZI FUNZIONALI ******************/

fespace Yh( Th, P2 );

/* w soluzione del problema di stato al passo temporale corrente
 * wold suluzione del problema di stato al passo temporale precedente
 * wtest funzione test
 * g0old forzante al passo temporale precedente
 */
Yh w, wold, wtest;
int dofYh = Yh.ndof;

//vettore della soluzioni w ad ogni passo temporale
Yh[int] statesol(nsol);

/******************  02.PROBLEMA SPAZIALE ******************/
 
/* Lo schema di integrazione temporale implementato è una variante di Crank-Nicolson
 * in particolare viene effettuato:
 *  un passo di EI con passo temporale dimezzato
 *      gamma1=1./2.;
 *  	gamma2=0.;
 *  	gamma3=0.;
 *  	gamma4=1./2.;
 *  nsol-2 passi di CN
 *  un passo di EA
 * Per questo motivo la matrice S rimane invariata dal primo al penultimo passo
 *  il parametro gamma verà settato a zero prima che la matrice S venga ricacolata 
 *  nel ultimo passo.
 */
real gamma1,gamma2,gamma3,gamma4;

/* uold e ui contengono il valore della soluzione di controllo al tempo t e t-dt
 * Al passo di EI solo la componente u(0) deve essere considerata
 * Per ogni passo i di CN le componenti u(i) ed u(i-1) devono essere considerati
 * Al passo di EA solo la componente u(nsol-1) deve essere considerata
 */
real uold, ui;

varf s(w,wtest) =   int2d(Th)( w*wtest/dt )
	        	  + int2d(Th)( gamma1*( dx(w)*dx(wtest) + dy(w)*dy(wtest) ) )
				  + on(1,2,3,4, w=wb);

					  
matrix S; 
real[int] statebc(Yh.ndof);




















