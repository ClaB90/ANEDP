/****************** Politecnico di Milano - ANEDP project ******************/
/* 														 					*
 *  	authors Edoardo Arbib 							 					*
 *				Claudia Bonomi 							 					*
 *											   			 					*
 *  	Descrizione: definizioni delle funzioni per CG		  				*
 *						Problema di stato									*
 *						Problema di controllo								*
 *																			*
 * 		Dipendenze:	funzioni.edp -> waT e a1						        *		
 *				    soluzioniEsatte -> definizioni funzioni esatte			*
 * 					main -> nsol						 					*
 * 					state -> statesol[]					 					*
 * 														 					*
 ****************************************************************************/

/* Valori dei moltiplicatori di lagrange sullo spazio Yh
 */
Yh listate,loldstate;

/* il termine noto del problema di stato diventa
 */
varf tnnew(w,wtest) =   int2d(Th)( wold*wtest/dt)
				  	  - int2d(Th)( gamma2*( dx(wold)*dx(wtest) + dy(wold)*dy(wtest) ) );
						//contributo di u
			 		  + int2d(Th)( gamma3*( listate*wtest ))
				 	  + int2d(Th)( gamma4*( loldstate*wtest ));

func real[int,int] stateCG(real[int,int]& termnot)
{	
	cout << "State " << endl;
	
	real[int] tmp(Yh.ndof);
	real[int,int] stateSolCG(nsol,Yh.ndof);
	
	//inizializzo le variabili iniziali ogni volta che chiamo la funzione
	wold=w0;
	t=dt;
	
	//Primo passo di EI con passo temporale dt/2
    gamma1=1./2.;
    gamma2=0.;
    gamma3=0.;
    gamma4=1./2.;
	
	//definisco i valori di uold
    loldstate[] = termnot(0,:);
    listate[] = termnot(1,:);
	
	/* Calcolo S e bc
	 * devo fare (nsol-1) passi prima di ricalcolare la matrice S per l'ultimo passo di EA
	 * mentre il vettore statebc rimane invariato ad ogni passo
	 */
	S=s(Yh,Yh,solver=UMFPACK);
	statebc=s(0,Yh);
	
	//aggiorno g0IIsx il dx non compare quindi non lo calcolo
	g0partsx = g0nonprojsx;
	g0IIsx = PUabScal(g0partsx);

    tmp=tnnew(0,Yh);
    tmp=tmp+statebc;
	
	//Risolvo
    w[]=(S^-1)*tmp;
    
	// salvo la mia soluzione al passo precedente
	stateSolCG(0,:)=w;
	
	//aggiorno wold, uold e il tempo
	wold=w;
	loldstate = listate;
	t += dt;
	
    // Passi di CN
    for(int i=1; i<nsol-1; i++)
	{
		gamma1=1./2.;
	    gamma2=1./2.;
	    gamma3=0.;
	    gamma4=1.;
		
		listate[] = termnot(i+1,:);
		
		//aggiorno g0IIsx il dx non compare quindi non lo calcolo
		g0partsx = g0nonprojsx;
		g0IIsx = PUabScal(g0partsx);
		
		tmp = tnnew(0,Yh);
		tmp += statebc;
		
		//Risolvo
		w[] = S^-1*tmp;
		
		// salvo la mia soluzione al passo precedente
		stateSolCG(i,:)=w;
		
		//aggiorno wold, uold, il tempo e g0old
		wold=w;
		loldstate = listate;
		t += dt;

	}
	
    //Passo di EA
	gamma1=0.;
    gamma2=1./2.;
    gamma3=1./2.;
    gamma4=0.;
	
	S=s(Yh,Yh);
	
	//aggiorno g0IIdx il sx non compare quindi non lo calcolo
	g0partdx = g0nonprojdx;
	g0IIdx = PUabScal(g0partdx);
	
	tmp = tnnew(0,Yh);
	tmp += statebc;
	
	w[] = S^-1*tmp;
	
	stateSolCG(nsol-1,:)=w;
    //plot(w,fill=1,value=1,wait=0,cmm=" Stato in t=T ");	
	
	//Calcolo dell'errore
	/*
	errStateL2 = normL2state();
	errProjectStateL2 = stateprojtrap();
	errStateLinf = normLinfstate(); */
	
	//cout << "errore state L2  " << errStateL2 << endl;
	//cout << "errore project state L2  " << errProjectStateL2 << endl;
	//cout << "errore state Linf  " << errStateLinf << endl;
	
	return stateSolCG;
}