real T=0.1;
real t=0.;
int nsol = 10;
real dt=T/(nsol-1);

verbosity=0;

include "controlparameters.edp";

include "funzioni.edp";

include "UabSet.edp";   

include "soluzioniEsatte.edp";  

include "saveme.edp";     

include "mesh.edp"; 

include "state.edp";

include "adjoint.edp";
	
include "normeeprodotti.edp";

include "funzioniCG.edp";
	
real[int,int] l(nsol,Yh.ndof);
include "controlfunction.edp";

real[int,int] l1(nsol,Yh.ndof);

real[int] l1vec(nsol),l2vec(nsol);

t=0.;
for(int i=0; i<nsol; i++)
{
	Yh help1, help2;
	help1 = we;
	help2 = wd;
	l(i,:) = help1[] - help2[];
	t=t+dt;
}
t=0.;

//DampedNewton();

cout << "l " << l << endl;
/*for(int i=0;i<nsol;i++)
{
Yh ex;
ex[]=l(i,:);
plot(ex,fill=1,value=1,wait=1);
}
*/
l1=adjCG(l);
for(int i=0; i<nsol; ++i)
{
	Yh born;
	born[]=l1(i,:);
	Bpk[i]=(-1/alpha)*int2d(Th)(g*born);
    l1vec[i]=PUabScal(Bpk[i]);
	l2vec[i] = ue[i]/l1vec[i];
}
//l1=l1*(-1./alpha);

u = l1vec;
saveControl(0);

real error=0.;
cout << " l1 " << l1 << endl;
cout << " l1vec" << l1vec << endl;
cout << " ues " << ue << endl;
cout << " rapporto " << l2vec << endl;
error=controlErrL2(l1vec);
cout << " error " << error << endl;
	
	
	
	
