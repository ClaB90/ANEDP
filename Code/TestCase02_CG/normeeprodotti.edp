/****************** Politecnico di Milano - ANEDP project ******************/
/* 														 					*
 *  	authors Edoardo Arbib 							 					*
 *				Claudia Bonomi 							 					*
 *											   			 					*
 *  	Descrizione: definiamo le funzioni					 				*
 *						- normL2								      		*
 *						- < vect1, vect2>L2						      		*
 *																			*
 * 		Dipendenze:	main -> variabili t e T definite  						*
 * 														 					*
 ****************************************************************************/

/* norma L2 che utilizza il metodo dei trapezi sullo spazio Yh
 */
func real normL2Yh(real[int,int]& xx)
{
	real tmp=0;
	
	Yh x1;
	
	for(int i=0; i< nsol-1; i++)
	{
		x1[] = xx(i,:);
		
		tmp += dt*(int2d(Th)(x1^2)); 
	    
	}
	
	tmp = sqrt(tmp);
	
	return tmp;
}

/* norma L2 che utilizza il metodo di Cavalieri Simpson sullo spazio Yh
*/
func real normL2YhCS(real[int,int] &xx)
{
	real tmp=0.;
	real savet=t;
	Yh x1,x2,x3;
	t=0;
	
	for(int i=0; i<nsol-1; ++i)
	{
		x1[]=xx(i,:);
		x2=wdp;

		tmp += (dt)*(int2d(Th)((x1-x2)^2));
		t=t+dt;
	}
	tmp=sqrt(tmp);
	t=savet;
	return tmp;
}

/* La funzione prodottoL2 ricava il prodotto vettoriale temporale tra due vettori di soluzioni
 * dello stesso spazio funzionale 
 */
func real prodottoL2(real[int,int]& xx, real[int,int]& ww)
{
	real tmp=0;
	
	Yh x1,x2;
	
	for(int i=0; i< nsol-1; i++)
	{
		x1[] = xx(i,:);
		x2[] = ww(i,:);
		
		tmp += dt*(int2d(Th)(x1*x2)); 
	}
	
	return tmp;
}

func real prodottoL2CS(real[int,int] &xx, real[int,int] &ww)
{
	real tmp=0.;
	real savet=t;
	Yh x1,x2,x3;
	t=0;
	for(int i=0; i<nsol-1; ++i)
	{
		x1[] = xx(i,:);
		x2[] = ww(i,:);
		x3 = wdp;
		
		tmp+= (dt)*(int2d(Th)(x1*(x3-x2)));
		t=t+dt;
	}
	t=savet;
	return tmp;
}


/* norma L2 che utilizza il metodo dei trapezi per la soluzione di controllo
 * la proiezione sullo spazio di controllo avviene durante il calcolo della norma
 */
func real normL2u(real[int] &xx)
{
	real tmp=0;
	
	real x1,x2;
	
	for(int i=0; i< nsol-1; i++)
	{
		x1 = xx[i];
		x2 = xx[i+1];
		
		tmp += ( int2d(Th)((PUabScal(x1))^2) 
			     + int2d(Th)((PUabScal(x2))^2))*(dt/2.); 
	}
	
	tmp = sqrt(tmp);
	
	return tmp;
}

func real normL2Pr(real[int] &controlsol)
{

	real err=0.;
	t=0.;
	
		/* m e q della retta y=mt+q a cui appartiene il segmento che rappresenta la u non proettata nel intervallo (t,t+dt)
	 */
	real m,q;
	
	/* ta e tb sono i punti di intersezione della retta y=mt+q e le rette y=a ed y=b
	 */
	real ta,tb;

	for(int i=0; i<nsol-1; i++)
	{
		
		m = (Bpk[i+1]-Bpk[i])/(dt);
		q = (Bpk[i]*(t+dt)-Bpk[i+1]*t)/(dt);
		if( m == 0 )
		{
		err=err+dt*(PUabScal(Bpk[i])^2);	
		
		
		}
		else{
		ta = (a-q)/m;
		tb = (b-q)/m;

		//caso di non intersezione
		if((ta<t || ta>(t+dt)) && (tb<t || tb>(t+dt)))
		{
			//Trovo la coordinata y del punto medio del segmento di retta y=mt+q (t,t+dt)			
			real Bpkmed=(Bpk[i]+Bpk[i+1])/2.;
			
			err =   err
				  + (dt/6.)*((controlsol[i])^2
				  + (controlsol[i+1])^2 
				  + 4*(PUabScal(Bpkmed))^2);
		}
		else
		{
			//interseco solo retta y=a => trovo due sottointervalli (t,ta) e (ta,t+dt)
		   	if(ta>=t && ta<=(t+dt) && (tb<t || tb>(t+dt)))
		   	{

		
		
		   //Coordinate dei punti medi della soluzione approssimata nei due sottointervalli
		   		real Bpkmed1=(Bpk[i]+a)/2.;
		   		real Bpkmed2=(Bpk[i+1]+a)/2.;
   		
				err =    err
					  + ((ta-t)/6.)*( (controlsol[i])^2 + (a)^2 
						               + 4*(PUabScal(Bpkmed1))^2 )
					  + ((t+dt-ta)/6.)*( (a)^2 + (controlsol[i+1])^2 
									   + 4*(PUabScal(Bpkmed2))^2 );
   
		   	}
		   	//interseco solo retta y=b => trovo due sottointervalli (t,tb) e (tb,t+dt)
			else if(tb>=t && tb<=(t+dt) && (ta<t || ta>(t+dt)))
		   	{	
				//Coordinate dei punti medi della soluzione approssimata nei due sottointervalli
		   		real Bpkmed1=(Bpk[i]+b)/2.;
		   		real Bpkmed2=(b+Bpk[i+1])/2.;
   		    
				err=   err
					 + ((tb-t)/6.)*( (controlsol[i])^2 + ( b )^2 
									  + 4*( PUabScal(Bpkmed1) )^2 )
					 + ((t+dt-tb)/6.)*(  (b)^2 + (controlsol[i+1])^2 
									    + 4*(PUabScal(Bpkmed2) )^2);
   
		   	}
			//interseco sia y=b che y=a => trovo tre sottointervalli (t,tc) (tc,td) (td,t+dt)
			else
			{
				real c,d,tc,td;
		
				if(ta<=tb)
				{ 
				  c=a;
				  d=b;
			    }
				else
				{
				  c=b;
				  d=a;
			    }
		
				tc=min(ta,tb);
				td=max(ta,tb);
		
				real Bpkmed1=(Bpk[i]+c)/2.;
				real Bpkmed2=(d+c)/2.;
				real Bpkmed3=(Bpk[i+1]+d)/2.;
		
				err =   err 
					  +((tc-t)/6.)*( ( controlsol[i])^2 + (c)^2 
						  			   + 4*( Bpkmed1 )^2 )
				      +((td-tc)/6.)*( (c)^2 + (d)^2 
									   + 4*( Bpkmed2 )^2 )
					  +((t+dt-td)/6.)*(  (d)^2 + ( controlsol[i+1])^2 
									   + 4*( Bpkmed3 )^2 ); 
			}
		   }   
		   			
		   t=t+dt;
				}
		}					

	return sqrt(err);
}
