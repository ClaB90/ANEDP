/*********************** Politecnico di Milano - ANEDP project ************************/
/* 														 					          *
 *  	authors Edoardo Arbib 							 					          *
 *				Claudia Bonomi 							 					          *
 *											   			 					          *
 *  	Descrizione: Per il problema di stato definiamo  					          *
 *						- spazi funzionali		         					          *
 *						- problema spaziale				 					          *
 *					    - funzione per la soluzione del problema temporale            * 
 *    					- norme dell'errore e analisi di convergenza                  *
 * 														 				 	 	 	  *
 * 		Dipendenze: main -> nsol + paramtri temporali + u(=soluzione controllo)  	  * 
 *						 -> alpha parametro del problema di controllo 				  *
 * 					soluzioniEsatte -> soluzione esatta di y e parametri t1 e t2 	  * 
 * 									   necessarie per il calcolo dell'errore     	  *
 * 					funzioni -> wa ed a1								 			  *
 * 														 				 	 	 	  *
 **************************************************************************************/

	
/****************** 00.PARAMETRI E FUNZIONI ******************/
// w0 soluzione all'istante iniziale
t=0.;
func w0 = -1.*(pi^2*wa)/(2+a1);

// wb funzione al bordo di dirchlet 
func wb = 0.;

/*la forzante del problema ha la seguente forma
 *	g0(t,x,y) = -pi^(4)*wa - PUad(-(exp(a1*pi^2*t)+exp(a1*pi^2*T))/(4.*alpha))
 * per calcolare il secondo termine è necessario usare le variabili di ausilio g0part e g0II
 * poichè freefem non ci permette di aglomerare le funzioni in un unica riga faremo dunque:
 * 		g0part= g0exp;
 *		g0II = PUabScal(g0part);
 */
func g01=-(pi^4)*wa;
func g02=-(pi^4)*exp(a1*(pi^2)*(t-dt))*sin(x*pi)*sin(y*pi);
func g03=(-(pi^4)/4.)*(exp(a1*(pi^2)*t)-exp(a1*(pi^2)*T));
func g04=(-(pi^4)/4.)*(exp(a1*(pi^2)*(t-dt))-exp(a1*(pi^2)*T));
real g05,g06;

func g0I = -pi^(4)*wa;
func g0exp = -(exp(a1*pi^2*t)+exp(a1*pi^2*T))/(4.*alpha);
real g0part, g0II;

func g0 = g0I - g0II;

/* Parametri per il calcolo dell'errore dello stato
 * errStateL2 = || pi*y -y_k ||L2
 *
 * errProjectStateL2 = || y -pi*y_k ||L2
 */
real errStateL2=0.;
real errProjectStateL2 = 0.; 
real errStateLinf = 0.; 

/****************** 01.SPAZI FUNZIONALI ******************/

fespace Yh( Th, P2 );

/* w soluzione del problema di stato al passo temporale corrente
 * wold suluzione del problema di stato al passo temporale precedente
 * wtest funzione test
 * g0old forzante al passo temporale precedente
 */
Yh w, wold, wtest, g0old;

//vettore della soluzioni w ad ogni passo temporale
//Yh[int] statesol(nsol);
Yh[int] statesol(nsol);

/* nel file funzioniErrore.edp le funzioni necessarie per il calcolo dell'errore del problema di stato
 * e di quello di controllo 
 */
include "funzioniErrore.edp";

/******************  02.PROBLEMA SPAZIALE ******************/
 
/* Lo schema di integrazione temporale implementato è una variante di Crank-Nicolson
 * in particolare viene effettuato:
 *  un passo di EI con passo temporale dimezzato
 *      gamma1=1./2.;
 *  	gamma2=0.;
 *  	gamma3=0.;
 *  	gamma4=1./2.;
 *  nsol-2 passi di CN
 *  un passo di EA
 * Per questo motivo la matrice S rimane invariata dal primo al penultimo passo
 *  il parametro gamma verà settato a zero prima che la matrice S venga ricacolata 
 *  nel ultimo passo.
 */
real gamma1,gamma2,gamma3,gamma4;

/* uold e ui contengono il valore della soluzione di controllo al tempo t e t-dt
 * Al passo di EI solo la componente u(0) deve essere considerata
 * Per ogni passo i di CN le componenti u(i) ed u(i-1) devono essere considerati
 * Al passo di EA solo la componente u(nsol-1) deve essere considerata
 */
real uold=0., ui;

varf s(w,wtest) =   int2d(Th)(w*wtest/dt)
	        	  + int2d(Th)(gamma1*(dx(w)*dx(wtest) + dy(w)*dy(wtest)))
				  + on(1,2,3,4, w=wb);

varf c(w,wtest) =   int2d(Th)(wold*wtest/dt)
				  - int2d(Th)((dx(wold)*dx(wtest) + dy(wold)*dy(wtest))*gamma2)
				  + int2d(Th)(((uold)*wtest)*gamma4) 
				  + int2d(Th)(gamma3*((ui)*wtest));
					  
varf d(w,wtest)=c+int2d(Th)(gamma3*g01*wtest)+int2d(Th)(g02*wtest*gamma4)+int2d(Th)((-1)*g05*gamma3*wtest)+int2d(Th)((-1)*gamma4*g06*wtest);



real[int] bc(Yh.ndof);
matrix S;
bc=s(0,Yh);
func real statet()
{
	real[int] tmp(Yh.ndof);
    
	real e1,e2;
    gamma1=1/2.;
    gamma2=0;
    gamma3=0;
    gamma4=1/2.;
    t=dt;
    S=s(Yh,Yh,solver=UMFPACK);
    e1=g03;
    e2=g04;
    g05=PUabScal(e1);
    g06=PUabScal(e2);
    wold=w0;
    uold=u[0];
    ui=0;
    tmp=d(0,Yh);
    tmp=tmp+bc;
    w[]=(S^-1)*tmp;
    statesol[0]=w;
    
    
    for(int i=1; i<nsol-1; i++)
	{
		gamma1=1/2.;
	    gamma2=1/2.;
	    gamma3=0;
	    gamma4=1;
	    t=t+dt;
	    wold=w;
	    e1=g03;
	    e2=g04;
	    g05=PUabScal(e1);
	    g06=PUabScal(e2);
	    uold=u[i];
	    ui=u[i+1];
	    tmp=d(0,Yh);
	    tmp=tmp+bc;
	    w[]=(S^-1)*tmp;
		statesol[i]=w;
		}
	
    gamma1=0;
    gamma2=1/2.;
    gamma3=1/2.;
    gamma4=0;
    S=s(Yh,Yh,solver=UMFPACK);
    e1=g03;
    e2=g04;
    g05=PUabScal(e1);
    g06=PUabScal(e2);
    ui=u[nsol-1];
    uold=u[nsol-2];
    wold=w;
    tmp=d(0,Yh);
    tmp=tmp+bc;
    w[]=(S^-1)*tmp;
    statesol[nsol-1]=w;
    plot(w,fill=1,value=1,wait=0,cmm=" Stato in t=T ");		
	
	//Calcolo dell'errore
	errStateL2 = normL2state();

	errProjectStateL2 = stateprojtrap();

	errStateLinf = normLinfstate();
	
	//cout << "errore state L2  " << errStateL2 << endl;
	//cout << "errore project state L2  " << errProjectStateL2 << endl;
	//cout << "errore state Linf  " << errStateLinf << endl;
	
	return 0;
}



















