/*********************** Politecnico di Milano - ANEDP project ************************/
/* 														 							  *
 *  	authors Edoardo Arbib 							 							  *
 *				Claudia Bonomi 							 							  *
 *											   			 							  *
 *  	Descrizione: Per il problema aggiuto definiamo  							  *
 *						- spazi funzionali		         							  *
 *						- problema spaziale				 							  *
 *					    - funzione per la soluzione del problema temporale  		  *
 * 		Dipendenze: main -> nsol + paramtri temporali 							 	  * 
 * 					state -> statesol(nsol) ed wd 									  * 
 * 									   necessarie per il calcolo dell'errore     	  *
 * 														 				 	 	 	  *
 **************************************************************************************/

// funzione p all'istante finale
func pT = 0.;

// funzione p sul bordo di dirichlet
func pb = 0.;

//definisco la funzione h = wstate - wd;
Yh h, hnext;

/****** 01.SPAZI FUNZIONALI ******/

fespace Ph( Th, P1 );
Ph p, p2, pnext, ptest;

//vettore della soluzioni p ad ogni passo temporale
//m serve per il calcolo dell'errore.
Ph[int] adjsol(nsol), adjsolvarf(nsol);
adjsol[nsol-1] = pT;
adjsolvarf[nsol-1] = pT;

/* nel file funzioniErrore.edp le funzioni necessarie per il calcolo dell'errore del problema di stato
 * e di quello di controllo 
 */
include "funzioniErroreAdj.edp";

/* Parametri per il calcolo dell'errore del problema aggiunto
 */
real errAdjL2, errAdjLinf;

/****** 02.Definizione matrici ******/ 


varf adj(p,ptest) =   int2d(Th)( p*ptest/dt )			
					+ int2d(Th)( 0.5*( dx(p)*dx(ptest) + dy(p)*dy(ptest) ) ) 
				    + on(1,2,3,4, p=pb);

varf adjtn(p,ptest) =   int2d(Th)( pnext*ptest/dt )
    				  - int2d(Th)( 0.5*( dx(pnext)*dx(ptest) + dy(pnext)*dy(ptest) ) ) 
  					  + int2d(Th)( 0.5*( h*ptest ) ) 
  					  + int2d(Th)( 0.5*( hnext*ptest ) ); 

 problem adjoint( p, ptest) = - int2d(Th)( pnext*ptest/dt )
							 + int2d(Th)( p*ptest/dt )			
						     + int2d(Th)( 0.5*( dx(p)*dx(ptest) + dy(p)*dy(ptest) ) ) 
						     + int2d(Th)( 0.5*( dx(pnext)*dx(ptest) + dy(pnext)*dy(ptest) ) ) 
						     - int2d(Th)( 0.5*( h*ptest ) ) 
						     - int2d(Th)( 0.5*( hnext*ptest ) ) 
						     + on(1,2,3,4, p=pb);  

/* NB - u non cambia al passo temporale della p quello che cambia è la h, se dipende dal tempo, 
 *   	 quindi bisogna tener traccia della hnext;
 */

matrix Adj; 
real[int] adjbc(Ph.ndof);

/****** 03.FUNZIONE PER SOLUZIONE IN TEMPO ******/ 

func real adjointt()
{
	cout << "Adjoint " << endl;
	
	real[int] tmpadj(Ph.ndof);
	
	//inizializzo le variabili iniziali ogni volta che chiamo la funzione
	int j = nsol;
	
	Bpk[j-1] = pT;
	pnext=pT;
	t=T;
	h = statesol[j-1] - wd;
	
	j--;
	t=t-dt;
	
	//Calcolo S e bc
	Adj=adj(Ph,Ph,solver=UMFPACK);
	adjbc=adj(0,Ph);

	//Devi risolvere un passo in meno per l'aggiunta poichè beta_0 == 0
	while( j > 0 )
	{
		//cout << "siamo al tempo   = " << t << endl;
		
		hnext = h;
		h = statesol[j-1] - wd;
		
		tmpadj = adjtn(0,Ph);
		tmpadj += adjbc;
		
		//Risolvo
		p2[] = Adj^-1*tmpadj;
		adjoint;
		
		//plot( p, nbiso=40, value = 1, fill=1, wait = 0, cmm="p" );
		pnext=p;
		adjsol[j-1] = p;
		adjsolvarf[j-1] = p2;
		
		//cout << " j " << j << endl;
		Bpk[j-1]= (-1./alpha)*int2d(Th)( p * g );
		
		
		t -= dt;
		j--;
	}
	
	//Calcolo errore
	errAdjL2 = normL2adj();
	//errAdjLinf = normLinfadj();
	
	return 0;
}
