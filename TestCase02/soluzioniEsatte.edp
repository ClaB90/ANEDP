/****************** Politecnico di Milano - ANEDP project ******************/
/* 														 					*
 *  	authors Edoardo Arbib 							 					*
 *				Claudia Bonomi 							 					*
 *											   			 					*
 *  	Descrizione: definizioni delle soluzioni esatte per w,p,u 			*
 *						per il primo test case								*
 *					 + funzioni per errore									*
 *																			*
 * 		Dipendenze:	funzioni.edp -> waT e a1						        *		
 *				    main -> parametro alpha									*
 * 					UabSet -> PUabscal									 	*
 * 														 					*
 * 														 					*
 ****************************************************************************/

//Definiamo le funzioni 
func we = cos((t/T)*2.*pi*a1)*g;
func pe = wa -waT;

real t1=dt*3./2.;
real t2=dt/2.;

func wedx = cos((t1/T)*2.*pi*a1)*g;
func wesx = cos((t2/T)*2.*pi*a1)*g;

/* ues = BPUab( -(exp(a1*pi^2*t))/(4*alpha) - (exp(a1*pi^2*T)) )
 * La costruzione della funzione esatta di u implica quindi l'utilizzo dell'operatore
 * di proiezione	
 */
func uenonproject = g0nonprojdx;

/* La funzione uet(t) prende in ingresso un tempo e calcola il valore della u esatta 
 * in quel istante temporale
 */
func real uet(real x)
{
	real tmp,savet=t;
	
	t=x;
	tmp = uenonproject;
	tmp = PUabScal(tmp);
	
	t=savet;
	return tmp;
	
}

/* La funzione ueproject() crea il vettore della soluzione di controllo esatta sulla griglia temporale standard
 */
func real[int] ueproject()
{
	real tmp=0;
	real[int] control(nsol);
	
	//inizializzo t che parte da 0
	t = 0.;
	
	for(int i=0; i<nsol; i++)
	{
		tmp = uenonproject;
		control[i] = PUabScal(tmp);
		t +=dt;
	}
	
	return control;
	
}

/* Definisco e calcolo la soluzione di controllo esatta sulla griglia temporale standard
 */
real[int] ue(nsol);
ue = ueproject();

/* La funzione uepuntimedi() crea il vettore dei punti medi della soluzione di controllo esatta sulla griglia temporale standard
 */
func real[int] uepuntimedi()
{
	real tmp=0;
	real[int] control(nsol-1);
	
	//inizializzo t che parte da 0
	t = dt/2.;
	
	for(int i=0; i<nsol-1; i++)
	{
		tmp = uenonproject;
		control[i] = PUabScal(tmp);
		t +=dt;
	}
	
	return control;
	
}

real[int] uemed(nsol-1);
uemed = uepuntimedi();







